" Bundles:
call vundle#begin()

"" Core
Plugin 'gmarik/Vundle.vim'

"" Early dependencies
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'honza/vim-snippets'

"" Other
Plugin 'edsono/vim-matchit'
Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'mbbill/undotree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'benekastah/neomake' " Replaces syntastic
Plugin 'tpope/vim-surround'
Plugin 'junegunn/goyo.vim'
Plugin 'tpope/vim-fugitive' " For gitv
Plugin 'gregsexton/gitv' " gitk for vim
Plugin 'jeetsukumaran/vim-indentwise' " Indent-based jumps
Plugin 'alvan/vim-closetag' " Auto-close HTML tags

"" Language support
if $GOPATH != ""
    Plugin 'fatih/vim-go'
    Plugin 'rhysd/vim-go-impl'
endif
Plugin 'janko-m/vim-test'
Plugin 'leshill/vim-json'
Plugin 'hdima/python-syntax'
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'davidhalter/jedi-vim' " Python static analysis engine
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'plasticboy/vim-markdown'
Plugin 'Shougo/deoplete.nvim' " Replaces neocomplcache
Plugin 'Shougo/neopairs.vim' " Close parens

"" Syntax highlighting
Plugin 'hail2u/vim-css3-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'saltstack/salt-vim.git'
Plugin 'othree/html5.vim'
Plugin 'ap/vim-css-color'
Plugin 'sophacles/vim-bundle-mako'
Plugin 'groenewege/vim-less'
Plugin 'honza/dockerfile.vim'
Plugin 'Shougo/neosnippet'
Plugin 'tikhomirov/vim-glsl'

"" Colorschemes
Plugin 'freeo/vim-kalisi'


"" Extra local bundles
if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
endif

" Done adding plugins
call vundle#end()


" Bundle configuration: (Largely borrowed from spf13)

"" Language-specific triggers
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4
autocmd BufRead,BufNewFile *.md set filetype=markdown

"" AutoCloseTag
let g:closetag_filenames = "*.html,*.xml,*.mako"

" Matchit
autocmd FileType mako let b:match_words = '<\(\w\w*\):</\1,{:}'

" ctrlp {
    let g:ctrlp_cmd = 'CtrlPMixed' " Search all the things.
    let g:ctrlp_working_path_mode = 'ra' " Nearest ancestor
    let g:ctrlp_mruf_max = 25
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\.git$\|\.hg$\|\.svn$',
        \ 'file': '\.exe$\|\.so$\|\.dll$' }

    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': 'find %s -type f'
    \ }
    " Reuse already-open buffers? (Default: 'Et')
    let g:ctrlp_switch_buffer = 0

    nnoremap <silent> <D-p> :CtrlP<CR>
    nnoremap <silent> <D-r> :CtrlPMRU<CR>
    nnoremap <leader>p :CtrlPTag<cr> " Ctags integration
"}

" OmniComplete {
    if has("autocmd") && exists("+omnifunc")
        autocmd Filetype *
            \if &omnifunc == "" |
            \setlocal omnifunc=syntaxcomplete#Complete |
            \endif
    endif

    hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
    hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
    hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

    " Some convenient mappings
    inoremap <expr><CR>       pumvisible() ? "\<C-y>" : "\<CR>"
    inoremap <expr><Down>     pumvisible() ? "\<C-n>" : "\<Down>"
    inoremap <expr><Up>       pumvisible() ? "\<C-p>" : "\<Up>"

    " Automatically open and close the popup menu / preview window
    au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
    set completeopt=menu,preview,longest

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    "autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType python setlocal omnifunc=jedi#completions
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    autocmd FileType go setlocal omnifunc=gocomplete#Complete
" }

" deoplete {
    let g:deoplete#enable_at_startup = 1

    " Tab-complete
    inoremap <silent><expr> <Tab>
    \ pumvisible() ? "\<C-n>" : "\<TAB>"

    " Use head matcher instead of fuzzy matcher
    call deoplete#custom#set('_', 'matchers', ['matcher_head'])

    " doplete + vim-jedi for Python
    "let g:jedi#completions_enabled = 0
    "let g:jedi#auto_vim_configuration = 0
    "let g:jedi#smart_auto_mappings = 0
    "let g:jedi#show_call_signatures = 0
" }

" neosnippet {
    imap <C-k> <Right><Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Right><Plug>(neosnippet_expand_or_jump)

    " Use honza's snippets.
    let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

    " Enable neosnippet snipmate compatibility mode
    let g:neosnippet#enable_snipmate_compatibility = 1

    " Disable runtime snippets
    let g:neosnippet#disable_runtime_snippets = { "_": 1, }

    " For snippet_complete marker.
    if has('conceal')
        set conceallevel=2 concealcursor=i
    endif

    " Disable the neosnippet preview candidate window
    " When enabled, there can be too much visual noise
    " especially when splits are used.
    set completeopt-=preview
" }

" UndoTree {
    nnoremap <Leader>u :UndotreeToggle<CR>
    " If undotree is opened, it is likely one wants to interact with it.
    let g:undotree_SetFocusWhenToggle=1
" }

" Tagbar {
    nmap <leader>ta :TagbarToggle<CR>

    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
        \ },
        \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
        \ },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
    \ }
" }

" vim-go
au FileType go nmap <leader>gd <Plug>(go-doc)
au FileType go nmap <leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>ru <Plug>(go-run)
au FileType go nmap <leader>re <Plug>(go-rename)
au FileType go nmap <leader>te <plug>(go-test)
au FileType go nmap <leader>in <Plug>(go-info)
au FileType go nmap <leader>ii <Plug>(go-implements)
au FileType go nmap gd <Plug>(go-def-split)
au FileType go nmap gD <Plug>(go-def)

let g:go_def_mapping_enabled = 0
let g:go_fmt_command = "goimports"

" vim-markdown
let g:vim_markdown_folding_disabled=1
au FileType markdown nmap <leader>t :Toc<CR>
au FileType markdown setlocal fo+=a textwidth=80 linebreak "spell complete+=kspell

" goyo (zenroom)
let g:goyo_width=82
nnoremap <Leader>z :Goyo<CR>

" neomake
autocmd! BufWritePost *.py Neomake
"autocmd! BufWritePost *.go Neomake!
